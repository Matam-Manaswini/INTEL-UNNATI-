#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <openssl/hmac.h>
#include <openssl/evp.h>
#include <openssl/kdf.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/bn.h>
#include <openssl/param_build.h>
#include <openssl/core_names.h>
#include <openssl/err.h>
#include <openssl/rand.h>
#include <openssl/dh.h>
#include <openssl/rsa.h>
#include <openssl/x509_vfy.h>

typedef EVP_PKEY DhContext;
#define IN
#define OUT
#define INOUT
#define BYTE unsigned char

uint32_t publicKeySizeBytes;
uint32_t len;
X509_NAME* subject;
X509_STORE_CTX ctx;

static const size_t PEM_BUFFER_SIZE_BYTES = 10000;
static const size_t HASH_SIZE_BYTES = 32;
static const size_t IV_SIZE_BYTES = 12;
static const size_t GMAC_SIZE_BYTES = 16;

bool hmac_SHA256(const BYTE* key, size_t keySizeBytes, const BYTE* message, size_t messageSizeBytes, BYTE* macBuffer, size_t macBufferSizeBytes) {
    EVP_MD_CTX* ctx = NULL;
    unsigned char md[EVP_MAX_MD_SIZE];
    unsigned int md_len;

    ctx = EVP_MD_CTX_new();
    if (ctx == NULL) {
        ERR_error_string(ERR_get_error(), (char*)macBuffer);
        goto err;
    }

    if (EVP_DigestInit_ex(ctx, EVP_sha256(), NULL) != 1) {
        ERR_error_string(ERR_get_error(), (char*)macBuffer);
        goto err;
    }

    if (EVP_DigestUpdate(ctx, message, messageSizeBytes) != 1) {
        ERR_error_string(ERR_get_error(), (char*)macBuffer);
        goto err;
    }

    if (EVP_DigestFinal_ex(ctx, md, &md_len) != 1) {
        ERR_error_string(ERR_get_error(), (char*)macBuffer);
        goto err;
    }

    if (md_len > macBufferSizeBytes) {
        ERR_error_string(1000, (char*)macBuffer);
        goto err;
    }

    memcpy(macBuffer, md, md_len);
    EVP_MD_CTX_free(ctx);
    return true;

err:
    EVP_MD_CTX_free(ctx);
    return false;
}

bool deriveKey_HKDF_SHA256(const BYTE* salt, size_t saltSizeBytes, const BYTE* secretMaterial, size_t secretMaterialSizeBytes, const BYTE* context, size_t contextSizeBytes, BYTE* outputBuffer, size_t outputBufferSizeBytes) {
    bool ret = false;
    EVP_PKEY_CTX* pctx = NULL;

    pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_HKDF, NULL);
    if (pctx == NULL) {
        printf("failed to get HKDF context\n");
        goto err;
    }
    if (EVP_PKEY_derive_init(pctx) <= 0) {
        ERR_error_string(ERR_get_error(), (char*)outputBuffer);
        goto err;
    }

    if (EVP_PKEY_CTX_set_hkdf_md(pctx, EVP_sha256()) <= 0) {
        ERR_error_string(ERR_get_error(), (char*)outputBuffer);
        goto err;
    }

    if (EVP_PKEY_CTX_set1_hkdf_salt(pctx, salt, saltSizeBytes) <= 0) {
        ERR_error_string(ERR_get_error(), (char*)outputBuffer);
        goto err;
    }

    if (EVP_PKEY_CTX_set1_hkdf_key(pctx, secretMaterial, secretMaterialSizeBytes) <= 0) {
        ERR_error_string(ERR_get_error(), (char*)outputBuffer);
        goto err;
    }

    if (EVP_PKEY_CTX_add1_hkdf_info(pctx, context, contextSizeBytes) <= 0) {
        ERR_error_string(ERR_get_error(), (char*)outputBuffer);
        goto err;
    }

    if (EVP_PKEY_derive(pctx, outputBuffer, &outputBufferSizeBytes) <= 0) {
        ERR_error_string(ERR_get_error(), (char*)outputBuffer);
        goto err;
    }

    ret = true;
err:
    EVP_PKEY_CTX_free(pctx);
    return ret;
}

size_t getCiphertextSizeAES_GCM256(size_t plaintextSizeBytes) {
    return plaintextSizeBytes + IV_SIZE_BYTES + GMAC_SIZE_BYTES;
}

size_t getPlaintextSizeAES_GCM256(size_t ciphertextSizeBytes) {
    return (ciphertextSizeBytes > IV_SIZE_BYTES + GMAC_SIZE_BYTES ? ciphertextSizeBytes - IV_SIZE_BYTES - GMAC_SIZE_BYTES : 0);
}

bool encryptAES_GCM256(const BYTE* key, size_t keySizeBytes, const BYTE* plaintext, size_t plaintextSizeBytes, const BYTE* aad, size_t aadSizeBytes, BYTE* ciphertextBuffer, size_t ciphertextBufferSizeBytes, size_t* pCiphertextSizeBytes) {
    BYTE iv[12];
    size_t ciphertextSizeBytes = getCiphertextSizeAES_GCM256(plaintextSizeBytes);

    if ((plaintext == NULL || plaintextSizeBytes == 0) && (aad == NULL || aadSizeBytes == 0)) {
        return false;
    }

    if (ciphertextBuffer == NULL || ciphertextBufferSizeBytes == 0) {
        if (pCiphertextSizeBytes != NULL) {
            *pCiphertextSizeBytes = ciphertextSizeBytes;
            return true;
        } else {
            return false;
        }
    }

    if (ciphertextBufferSizeBytes < ciphertextSizeBytes) {
        return false;
    }

    RAND_bytes(iv, 12);

    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    EVP_EncryptInit_ex(ctx, EVP_aes_256_gcm(), NULL, key, iv);
    EVP_EncryptUpdate(ctx, NULL, (int*)&ciphertextSizeBytes, aad, aadSizeBytes);
    EVP_EncryptUpdate(ctx, ciphertextBuffer + 12, (int*)&ciphertextSizeBytes, plaintext, plaintextSizeBytes);
    EVP_EncryptFinal_ex(ctx, ciphertextBuffer + 12 + plaintextSizeBytes, (int*)&ciphertextSizeBytes);
    EVP_CIPHER_CTX_free(ctx);

    memcpy(ciphertextBuffer, iv, 12);
    *pCiphertextSizeBytes = ciphertextSizeBytes;

    return true;
}

bool decryptAES_GCM256(const BYTE* key, size_t keySizeBytes, const BYTE* ciphertext, size_t ciphertextSizeBytes, const BYTE* aad, size_t aadSizeBytes, BYTE* plaintextBuffer, size_t plaintextBufferSizeBytes, size_t* pPlaintextSizeBytes) {
    if (ciphertext == NULL || ciphertextSizeBytes < (IV_SIZE_BYTES + GMAC_SIZE_BYTES)) {
        return false;
    }

    size_t plaintextSizeBytes = getPlaintextSizeAES_GCM256(ciphertextSizeBytes);

    if (plaintextBuffer == NULL || plaintextBufferSizeBytes == 0) {
        if (pPlaintextSizeBytes != NULL) {
            *pPlaintextSizeBytes = plaintextSizeBytes;
            return true;
        } else {
            return false;
        }
    }

    if (plaintextBufferSizeBytes < plaintextSizeBytes) {
        return false;
    }

    BYTE iv[IV_SIZE_BYTES];
    memcpy(iv, ciphertext, IV_SIZE_BYTES);

    EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
    EVP_DecryptInit_ex(ctx, EVP_aes_256_gcm(), NULL, key, iv);
    EVP_DecryptUpdate(ctx, NULL, (int*)&plaintextSizeBytes, aad, aadSizeBytes);
    EVP_DecryptUpdate(ctx, plaintextBuffer, (int*)&plaintextSizeBytes, ciphertext + IV_SIZE_BYTES, ciphertextSizeBytes - IV_SIZE_BYTES - GMAC_SIZE_BYTES);
    EVP_DecryptFinal_ex(ctx, plaintextBuffer + plaintextSizeBytes, (int*)&plaintextSizeBytes);
    EVP_CIPHER_CTX_free(ctx);

    if (pPlaintextSizeBytes != NULL) {
        *pPlaintextSizeBytes = plaintextSizeBytes;
    }
    return false;
}

bool readRSAKeyFromFile(const char* keyFilename, const char* filePassword, EVP_PKEY** pKeyContext) {
    return false;
}

bool signMessageRsa3072Pss(const BYTE* message, size_t messageSizeBytes, EVP_PKEY* privateKeyContext, BYTE* signatureBuffer, size_t signatureBufferSizeBytes) {
    return false;
}

bool verifyMessageRsa3072Pss(const BYTE* message, size_t messageSizeBytes, EVP_PKEY* publicKeyContext, const BYTE* signature, size_t signatureSizeBytes, bool* result) {
    return false;
}

void cleanKeyContext(EVP_PKEY** pKeyContext) {
    if (*pKeyContext != NULL) {
        EVP_PKEY_free(*pKeyContext);
        *pKeyContext = NULL;
    }
}

bool writePublicKeyToPemBuffer(EVP_PKEY* keyContext, BYTE* publicKeyPemBuffer, size_t publicKeyBufferSizeBytes) {
    return false;
}

bool loadPublicKeyFromPemBuffer(EVP_PKEY** context, const BYTE* publicKeyPemBuffer, size_t publicKeyBufferSizeBytes) {
    return false;
}

bool startDh(EVP_PKEY** pDhContext, BYTE* publicKeyBuffer, size_t publicKeyBufferSizeBytes) {
    bool ret = false;
    BIGNUM* p = NULL;
    BIGNUM* g = NULL;
    unsigned char generator = 2;
    DH* dh = NULL;
    EVP_PKEY* params = NULL;
    EVP_PKEY_CTX* pctx = NULL;

    p = BN_new();
    g = BN_new();
    dh = DH_new();
    if (dh == NULL || p == NULL || g == NULL) {
        return false;
    }

    BN_set_word(g, generator);
    BN_set_word(p, generator);

    if (DH_generate_key(dh) != 1) {
        return false;
    }

    pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_DH, NULL);
    if (pctx == NULL) {
        return false;
    }

    EVP_PKEY_paramgen_init(pctx);
    EVP_PKEY_CTX_set_dh_nid(pctx, NID_ffdhe2048);

    EVP_PKEY_paramgen(pctx, &params);
    if (EVP_PKEY_keygen_init(pctx) <= 0) {
        return false;
    }
    if (EVP_PKEY_keygen(pctx, pDhContext) <= 0) {
        return false;
    }

    EVP_PKEY_CTX_free(pctx);
    EVP_PKEY_free(params);
    return true;
}

bool completeDh(EVP_PKEY* dhContext, const BYTE* otherPartyPublicKeyBuffer, size_t otherPartyPublicKeySizeBytes, BYTE* sharedSecretBuffer, size_t sharedSecretBufferSizeBytes, size_t* pSharedSecretSizeBytes) {
    return false;
}

bool compareHashes(const BYTE* hash1, const BYTE* hash2, size_t length) {
    return false;
}

bool generateRootCA(const char* dn, size_t dnSizeBytes, const char* caFileName, size_t caFileNameSizeBytes, const char* filePassword, size_t filePasswordSizeBytes) {
    return false;
}

bool generateCSR(const char* dn, size_t dnSizeBytes, const char* csrFileName, size_t csrFileNameSizeBytes) {
    return false;
}

bool generateCert(const char* csrFileName, size_t csrFileNameSizeBytes, const char* caFileName, size_t caFileNameSizeBytes, const char* certFileName, size_t certFileNameSizeBytes, const char* filePassword, size_t filePasswordSizeBytes) {
    return false;
}

bool verifyCert(const char* caFileName, size_t caFileNameSizeBytes, const char* certFileName, size_t certFileNameSizeBytes) {
    return false;
}

int main() {
    // Example usage
    BYTE key[32] = {0};
    BYTE message[32] = "Test message";
    BYTE macBuffer[EVP_MAX_MD_SIZE];
    size_t macBufferSizeBytes = sizeof(macBuffer);

    if (hmac_SHA256(key, sizeof(key), message, sizeof(message), macBuffer, macBufferSizeBytes)) {
        printf("HMAC-SHA256 successful\n");
    } else {
        printf("HMAC-SHA256 failed\n");
    }

    return 0;
}
