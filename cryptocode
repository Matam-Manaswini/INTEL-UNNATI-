#include <stdlib.h>
#include <string.h>
#include "utils.h"
#include "crypto_wrapper.h"

#ifdef OPENSSL
#include <openssl/hmac.h>
#include <openssl/evp.h>
#include <openssl/kdf.h>
#include <openssl/pem.h>
#include <openssl/x509.h>
#include <openssl/x509v3.h>
#include <openssl/bn.h>
#include <openssl/param_build.h>
#include <openssl/core_names.h>
#include <openssl/err.h>
#include <openssl/rand.h>
#include <openssl/dh.h>
#include <openssl/rsa.h>
#include <openssl/x509_vfy.h>

#ifdef WIN
#pragma comment (lib, "libcrypto.lib")
#pragma comment (lib, "openssl.lib")
#endif // #ifdef WIN

typedef struct dh_st DH;
typedef struct evp_pkey_st EVP_PKEY;
typedef EVP_PKEY DhContext;
uint32_t publicKeySizeBytes;
uint32_t len;
X509_NAME* subject;
X509_STORE_CTX ctx;
static constexpr size_t PEM_BUFFER_SIZE_BYTES = 10000;
static constexpr size_t HASH_SIZE_BYTES = 32; //To be define by the participants
static constexpr size_t IV_SIZE_BYTES = 12; //To be define by the participants
static constexpr size_t GMAC_SIZE_BYTES = 16; //To be define by the participants



bool CryptoWrapper::hmac_SHA256(IN const BYTE* key, size_t keySizeBytes, IN const BYTE* message, IN size_t messageSizeBytes, OUT BYTE* macBuffer, IN size_t macBufferSizeBytes)
{
	EVP_MD_CTX* ctx = NULL;
	unsigned char md[EVP_MAX_MD_SIZE];
	unsigned int md_len;
	ctx = EVP_MD_CTX_new();
	if (ctx == NULL)
	{
		ERR_error_string(ERR_get_error(), (char*)macBuffer);
		goto err;
	}

	if (EVP_DigestInit_ex(ctx, EVP_sha256(), NULL) != 1)
	{
		ERR_error_string(ERR_get_error(), (char*)macBuffer);
		goto err;
	}

	if (EVP_DigestUpdate(ctx, message, messageSizeBytes) != 1)
	{
		ERR_error_string(ERR_get_error(), (char*)macBuffer);
		goto err;
	}

	if (EVP_DigestFinal_ex(ctx, md, &md_len) != 1)
	{
		ERR_error_string(ERR_get_error(), (char*)macBuffer);
		goto err;
	}


	if (md_len > macBufferSizeBytes)
	{
		ERR_error_string(1000, (char*)macBuffer);
		goto err;
	}

	memcpy(macBuffer, md, md_len);
	EVP_MD_CTX_free(ctx);
	return true;

err:
	EVP_MD_CTX_free(ctx);

	return false;
}


bool CryptoWrapper::deriveKey_HKDF_SHA256(IN const BYTE* salt, IN size_t saltSizeBytes,
	IN const BYTE* secretMaterial, IN size_t secretMaterialSizeBytes,
	IN const BYTE* context, IN size_t contextSizeBytes,
	OUT BYTE* outputBuffer, IN size_t outputBufferSizeBytes)
{
	bool ret = false;
	EVP_PKEY_CTX* pctx = NULL;

	pctx = EVP_PKEY_CTX_new_id(EVP_PKEY_HKDF, NULL);
	if (pctx == NULL)
	{
		printf("failed to get HKDF context\n");
		goto err;
	}
	if (EVP_PKEY_derive_init(pctx) <= 0)
	{
		ERR_error_string(ERR_get_error(), (char*)outputBuffer);
		goto err;
	}

	if (EVP_PKEY_CTX_set_hkdf_md(pctx, EVP_sha256()) <= 0)
	{
		ERR_error_string(ERR_get_error(), (char*)outputBuffer);
		goto err;
	}

	if (EVP_PKEY_CTX_set1_hkdf_salt(pctx, salt, saltSizeBytes) <= 0)
	{
		ERR_error_string(ERR_get_error(), (char*)outputBuffer);
		goto err;
	}

	if (EVP_PKEY_CTX_set1_hkdf_key(pctx, secretMaterial, secretMaterialSizeBytes) <= 0)
	{
		ERR_error_string(ERR_get_error(), (char*)outputBuffer);
		goto err;
	}

	if (EVP_PKEY_CTX_add1_hkdf_info(pctx, context, contextSizeBytes) <= 0)
	{
		ERR_error_string(ERR_get_error(), (char*)outputBuffer);
		goto err;
	}

	if (EVP_PKEY_derive(pctx, outputBuffer, &outputBufferSizeBytes) <= 0)
	{
		ERR_error_string(ERR_get_error(), (char*)outputBuffer);
		goto err;
	}

	ret = true;
err:
	EVP_PKEY_CTX_free(pctx);

	return ret;


}


size_t CryptoWrapper::getCiphertextSizeAES_GCM256(IN size_t plaintextSizeBytes)
{
	return plaintextSizeBytes + IV_SIZE_BYTES + GMAC_SIZE_BYTES;
}


size_t CryptoWrapper::getPlaintextSizeAES_GCM256(IN size_t ciphertextSizeBytes)
{
	return (ciphertextSizeBytes > IV_SIZE_BYTES + GMAC_SIZE_BYTES ? ciphertextSizeBytes - IV_SIZE_BYTES - GMAC_SIZE_BYTES : 0);
}

bool CryptoWrapper::encryptAES_GCM256(IN const BYTE* key, IN size_t keySizeBytes,
	IN const BYTE* plaintext, IN size_t plaintextSizeBytes,
	IN const BYTE* aad, IN size_t aadSizeBytes,
	OUT BYTE* ciphertextBuffer, IN size_t ciphertextBufferSizeBytes, OUT size_t* pCiphertextSizeBytes)
{
	BYTE iv[12]; // used implicitly in EVP_EncryptInit_ex and memcpy
	size_t ciphertextSizeBytes = getCiphertextSizeAES_GCM256(plaintextSizeBytes);

	if ((plaintext == NULL || plaintextSizeBytes == 0) && (aad == NULL || aadSizeBytes == 0))
	{
		return false;
	}

	if (ciphertextBuffer == NULL || ciphertextBufferSizeBytes == 0)
	{
		if (pCiphertextSizeBytes != NULL)
		{
			*pCiphertextSizeBytes = ciphertextSizeBytes;
			return true;
		}
		else
		{
			return false;
		}
	}

	if (ciphertextBufferSizeBytes < ciphertextSizeBytes)
	{
		return false;
	}

	RAND_bytes(iv, 12); // Generate a random IV

	EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
	EVP_EncryptInit_ex(ctx, EVP_aes_256_gcm(), NULL, key, iv);
	EVP_EncryptUpdate(ctx, NULL, (int*)&ciphertextSizeBytes, aad, aadSizeBytes); // Authenticate the AAD
	EVP_EncryptUpdate(ctx, ciphertextBuffer + 12, (int*)&ciphertextSizeBytes, plaintext, plaintextSizeBytes); // Encrypt the plaintext
	EVP_EncryptFinal_ex(ctx, ciphertextBuffer + 12 + plaintextSizeBytes, (int*)&ciphertextSizeBytes);
	EVP_CIPHER_CTX_free(ctx);

	memcpy(ciphertextBuffer, iv, 12); // Copy the IV to the beginning of the ciphertext

	*pCiphertextSizeBytes = ciphertextSizeBytes; // Update the ciphertext size

	return true; // Return true if encryption is successful

err:
	return false;
}

bool CryptoWrapper::decryptAES_GCM256(IN const BYTE* key, IN size_t keySizeBytes,
	IN const BYTE* ciphertext, IN size_t ciphertextSizeBytes,
	IN const BYTE* aad, IN size_t aadSizeBytes,
	OUT BYTE* plaintextBuffer, IN size_t plaintextBufferSizeBytes, OUT size_t* pPlaintextSizeBytes)
{
	if (ciphertext == NULL || ciphertextSizeBytes < (IV_SIZE_BYTES + GMAC_SIZE_BYTES))
	{
		return false;
	}

	size_t plaintextSizeBytes = getPlaintextSizeAES_GCM256(ciphertextSizeBytes);

	if (plaintextBuffer == NULL || plaintextBufferSizeBytes == 0)
	{
		if (pPlaintextSizeBytes != NULL)
		{
			*pPlaintextSizeBytes = plaintextSizeBytes;
			return true;
		}
		else
		{
			return false;
		}
	}

	if (plaintextBufferSizeBytes < plaintextSizeBytes)
	{
		return false;
	}

	BYTE iv[IV_SIZE_BYTES];
	memcpy(iv, ciphertext, IV_SIZE_BYTES); // Copy the IV from the ciphertext

	EVP_CIPHER_CTX* ctx = EVP_CIPHER_CTX_new();
	EVP_DecryptInit_ex(ctx, EVP_aes_256_gcm(), NULL, key, iv);
	EVP_DecryptUpdate(ctx, NULL, (int*)&plaintextSizeBytes, aad, aadSizeBytes); // Authenticate the AAD
	EVP_DecryptUpdate(ctx, plaintextBuffer, (int*)&plaintextSizeBytes, ciphertext + IV_SIZE_BYTES, ciphertextSizeBytes - IV_SIZE_BYTES - GMAC_SIZE_BYTES); // Decrypt the plaintext
	EVP_DecryptFinal_ex(ctx, plaintextBuffer + plaintextSizeBytes, (int*)&plaintextSizeBytes);
	EVP_CIPHER_CTX_free(ctx);

	if (pPlaintextSizeBytes != NULL)
	{
		*pPlaintextSizeBytes = plaintextSizeBytes;
	}
	return false;
}

bool CryptoWrapper::readRSAKeyFromFile(IN const char* keyFilename, IN const char* filePassword, OUT KeypairContext** pKeyContext)
{
	return false;
}


bool CryptoWrapper::signMessageRsa3072Pss(IN const BYTE* message, IN size_t messageSizeBytes, IN KeypairContext* privateKeyContext, OUT BYTE* signatureBuffer, IN size_t signatureBufferSizeBytes)
{
	return false;
}


bool CryptoWrapper::verifyMessageRsa3072Pss(IN const BYTE* message, IN size_t messageSizeBytes, IN KeypairContext* publicKeyContext, IN const BYTE* signature, IN size_t signatureSizeBytes, OUT bool* result)
{

	return false;
}


void CryptoWrapper::cleanKeyContext(INOUT KeypairContext** pKeyContext)
{
	if (*pKeyContext != NULL)
	{
		EVP_PKEY_CTX_free(*pKeyContext);
		*pKeyContext = NULL;
	}
}


bool CryptoWrapper::writePublicKeyToPemBuffer(IN KeypairContext* keyContext, OUT BYTE* publicKeyPemBuffer, IN size_t publicKeyBufferSizeBytes)
{
	return false;
}


bool CryptoWrapper::loadPublicKeyFromPemBuffer(INOUT KeypairContext* context, IN const BYTE* publicKeyPemBuffer, IN size_t publicKeyBufferSizeBytes)
{
	return false;
}



bool CryptoWrapper::startDh(OUT DhContext** pDhContext, OUT BYTE* publicKeyBuffer, IN size_t publicKeyBufferSizeBytes)
{
	bool ret = false;
	BIGNUM* p = NULL;
	BIGNUM* g = NULL;
	unsigned char generator = 2;
	DH* dh = NULL; // Initialize dh to NULL
	EVP_PKEY* pkey = NULL; // Initialize pkey to NULL

	dh = DH_new();
	if (dh == NULL) {
		// Handle error
		ret = false;
		goto cleanup;
	}

	p = BN_get_rfc3526_prime_3072(NULL);
	if (p == NULL) {
		ret = false;
		goto cleanup;
	}

	g = BN_bin2bn(&generator, 1, NULL);
	if (g == NULL) {
		ret = false;
		goto cleanup;
	}

	if (!DH_set0_pqg(dh, p, NULL, g)) {
		ret = false;
		goto cleanup;
	}

	pkey = EVP_PKEY_new();
	if (pkey == NULL) {
		ret = false;
		goto cleanup;
	}

	if (!EVP_PKEY_set1_DH(pkey, dh)) {
		ret = false;
		goto cleanup;
	}

	*pDhContext = pkey; // Assign the EVP_PKEY to the DhContext

	// Generate public keypublicKeySizeBytes = i2d_PublicKey(pkey, &publicKeyBuffer);

	publicKeySizeBytes = i2d_PublicKey(pkey, &publicKeyBuffer);
	if (publicKeySizeBytes < 0 || publicKeySizeBytes > publicKeyBufferSizeBytes) {
		ret = false;
		goto cleanup;
	}

	ret = true;

cleanup:
	BN_free(p);
	BN_free(g);
	DH_free(dh);
	EVP_PKEY_free(pkey);

	return ret;
}



bool CreatePeerPublicKey(const unsigned char* peerPublicKey, size_t peerPublicKeySizeBytes, EVP_PKEY** genPeerPublicKey)
{
	EVP_PKEY* pkey = nullptr;

	const unsigned char* peerPublicKeyPtr = peerPublicKey;
	long size = static_cast<long>(peerPublicKeySizeBytes);

	pkey = d2i_PUBKEY(nullptr, &peerPublicKeyPtr, size);
	if (pkey == nullptr) {
		// Handle error
		goto cleanup;
	}

	*genPeerPublicKey = pkey;
	return true; // Return true if successful

cleanup:
	if (pkey != nullptr) {
		EVP_PKEY_free(pkey);
	}
	return false; // Return false if failed
}

bool CryptoWrapper::getDhSharedSecret(INOUT DhContext* dhContext, IN const BYTE* peerPublicKey, IN size_t peerPublicKeySizeBytes, OUT BYTE* sharedSecretBuffer, IN size_t sharedSecretBufferSizeBytes)
{
	bool ret = false;
	EVP_PKEY* genPeerPublicKey = NULL;
	EVP_PKEY_CTX* derivationCtx = NULL;
	size_t sharedSecretSizeBytes; // Define sharedSecretSizeBytes as size_t

	if (dhContext == NULL || peerPublicKey == NULL || sharedSecretBuffer == NULL)
	{
		goto err;
	}

	if (!CreatePeerPublicKey(peerPublicKey, peerPublicKeySizeBytes, &genPeerPublicKey))
	{
		goto err;
	}

	derivationCtx = EVP_PKEY_CTX_new(dhContext, NULL);
	if (derivationCtx == NULL)
	{
		goto err;
	}

	if (EVP_PKEY_derive_init(derivationCtx) <= 0)
	{
		goto err;
	}

	if (EVP_PKEY_derive_set_peer(derivationCtx, genPeerPublicKey) <= 0)
	{
		goto err;
	}

	sharedSecretSizeBytes = sharedSecretBufferSizeBytes; // Initialize sharedSecretSizeBytes
	if (EVP_PKEY_derive(derivationCtx, sharedSecretBuffer, &sharedSecretSizeBytes) <= 0)
	{
		goto err;
	}

	ret = true;

err:
	EVP_PKEY_CTX_free(derivationCtx);
	EVP_PKEY_free(genPeerPublicKey);

	return ret;
}

void CryptoWrapper::cleanDhContext(INOUT EVP_PKEY** pDhContext)
{
	if (*pDhContext != NULL)
	{
		EVP_PKEY_free(*pDhContext);
		*pDhContext = NULL;
	}
}

X509* loadCertificate(const BYTE* certBuffer, size_t certSizeBytes)
{
	int ret = 0;
	BIO* bio = NULL;
	X509* cert = NULL;

	bio = BIO_new(BIO_s_mem());
	if (bio == NULL)
	{
		printf("BIO_new() fail \n");
		goto err;
	}

	ret = BIO_write(bio, (const void*)certBuffer, (int)certSizeBytes);
	if (ret <= 0)
	{
		printf("BIO_write() fail \n");
		goto err;
	}

	cert = PEM_read_bio_X509(bio, NULL, NULL, NULL);
	if (cert == NULL)
	{
		printf("PEM_read_bio_X509() fail \n");
		goto err;
	}

err:
	BIO_free(bio);

	return cert;
}

bool CryptoWrapper::checkCertificate(IN const BYTE* cACcertBuffer, IN size_t cACertSizeBytes, IN const BYTE* certBuffer, IN size_t certSizeBytes, IN const char* expectedCN)
{
	int ret = 0;
	X509* userCert = NULL;
	X509* caCert = NULL;
	X509_STORE* store = NULL;
	X509_STORE_CTX ctx;
	X509_NAME* subject;
	int len;

	caCert = loadCertificate(cACcertBuffer, cACertSizeBytes);
	if (caCert == NULL)
	{
		printf("loadCertificate() fail \n");
		goto err;
	}

	userCert = loadCertificate(certBuffer, certSizeBytes);
	if (userCert == NULL)
	{
		printf("loadCertificate() fail \n");
		goto err;
	}

	// Create a new X509_STORE object
	store = X509_STORE_new();
	if (store == NULL)
	{
		printf("X509_STORE_new() fail \n");
		goto err;
	}

	// Add the caCert to the store
	if (!X509_STORE_add_cert(store, caCert))
	{
		printf("X509_STORE_add_cert() fail \n");
		goto err;
	}

	// Initialize the X509_STORE_CTX object
	X509_STORE_CTX_init(&ctx, store, userCert, NULL);

	// Verify the certificate
	ret = X509_STORE_CTX_verify(&ctx);
	if (ret != 1)
	{
		printf("X509_STORE_CTX_verify() fail \n");
		goto err;
	}

	// Check the subject CN of the certificate
	subject = X509_get_subject_name(userCert);
	if (subject == NULL)
	{
		printf("X509_get_subject_name() fail \n");
		goto err;
	}

	len = strlen(expectedCN);
	char cn[256];
	X509_NAME_get_text_by_NID(subject, NID_commonName, cn, 256);
	if (strncmp(cn, expectedCN, len) != 0)
	{
		printf("Certificate CN does not match expected CN\n");
		goto err;
	}

	ret = 1; // Certificate is valid

err:
	X509_free(caCert);
	X509_free(userCert);
	X509_STORE_free(store);

	return ret == 1;
}


bool CryptoWrapper::getPublicKeyFromCertificate(IN const BYTE* certBuffer, IN size_t certSizeBytes, OUT KeypairContext** pPublicKeyContext)
{

	return false;
}

#endif // #ifdef OPENSSL

/*
*
* Usefull links
* -------------------------
* *
* https://www.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/intrinsics/intrinsics-for-later-gen-core-proc-instruct-exts/intrinsics-gen-rand-nums-from-16-32-64-bit-ints/rdrand16-step-rdrand32-step-rdrand64-step.html
* https://wiki.openssl.org/index.php/OpenSSL_3.0
* https://www.rfc-editor.org/rfc/rfc3526
*
*
* Usefull APIs
* -------------------------
*
* EVP_MD_CTX_new
* EVP_PKEY_new_raw_private_key
* EVP_DigestSignInit
* EVP_DigestSignUpdate
* EVP_PKEY_CTX_new_id
* EVP_PKEY_derive_init
* EVP_PKEY_CTX_set_hkdf_md
* EVP_PKEY_CTX_set1_hkdf_salt
* EVP_PKEY_CTX_set1_hkdf_key
* EVP_PKEY_derive
* EVP_CIPHER_CTX_new
* EVP_EncryptInit_ex
* EVP_EncryptUpdate
* EVP_EncryptFinal_ex
* EVP_CIPHER_CTX_ctrl
* EVP_DecryptInit_ex
* EVP_DecryptUpdate
* EVP_DecryptFinal_ex
* OSSL_PARAM_BLD_new
* OSSL_PARAM_BLD_push_BN
* EVP_PKEY_CTX_new_from_name
* EVP_PKEY_fromdata_init
* EVP_PKEY_fromdata
* EVP_PKEY_CTX_new
* EVP_PKEY_derive_init
* EVP_PKEY_derive_set_peer
* EVP_PKEY_derive_init
* BIO_new
* BIO_write
* PEM_read_bio_X509
* X509_STORE_new
* X509_STORE_CTX_new
* X509_STORE_add_cert
* X509_verify_cert
* X509_check_host
*
*
*
*/
